import TelegramBot from "node-telegram-bot-api";
import { bot, dayOfWeek, setLessonsCreatedState, setLessonsInDb, setLessonsState } from "..";
import { client } from "../db/main";
import { constBtns } from "../commands/components/constBtns";
import { setSchedule } from "./components/setSchedule";
import { Lessons } from "../db/entity/lessons.entity";
import { setLessonsDb } from "./components/setLessonsDb";
import { onBack } from "./components/onBack";
import { getStartLessons } from "../utils/getStartLessons";



export async function onText(msg: TelegramBot.Message) {
    try {
        const chatId = msg.chat.id
        const text = msg.text

        if (text === '–ù–∞–∑–∞–¥') {
            onBack(msg)
        }
        if (setLessonsState[chatId] && text === '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ') {
            setSchedule(msg)
        }

        if (setLessonsInDb[chatId]?.id && setLessonsInDb[chatId]?.day !== dayOfWeek[5]) {
            setLessonsDb(msg)
        }
        if (/*setLessonsCreatedState[chatId] && */text === '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é') {
            const dayIdx = new Date().getDay() - 1;
            const day = dayOfWeek[dayIdx];

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const schedule: Lessons[] = (await client.query(`
                SELECT * FROM lessons
                WHERE user_id = $1
            `, [msg.from?.id])).rows;

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            const groupedSchedule: { [key: string]: Lessons[] } = {};

            for (const lesson of schedule) {
                const day = lesson.day_of_week; // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                if (!groupedSchedule[day]) {
                    groupedSchedule[day] = []; // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                }
                groupedSchedule[day].push(lesson); // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
            }


            if (schedule.length === 0) {
                await bot.sendMessage(chatId, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —É—Ä–æ–∫–æ–≤');
                onBack(msg);
                return;
            }


            for (const dayOfWeek in groupedSchedule) {
                const lessons = groupedSchedule[dayOfWeek]; // –£—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                const scheduleOfDay = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dayOfWeek}`.toUpperCase()
                let scheduleText = `\`\`\`\nüìÖ${scheduleOfDay}\n\`\`\`\n`;

                const date = await getStartLessons();
                let d = new Date(date);
                let d2 = new Date(date);

                for (let i = 0; i < lessons.length; i++) {
                    if (i === 1 || i === 2) {
                        scheduleText += `\`\`\`${i + 1}. ${lessons[i].lesson.toUpperCase()}\`\`\`\nüïí –° ${d.toLocaleTimeString().slice(0, 5)} - ${new Date(d2.setMinutes(d.getMinutes() + 40)).toLocaleTimeString().slice(0, 5)}, –ø–µ—Ä–µ–º–µ–Ω–∞ ${20} –º–∏–Ω—É—Ç\n`;
                        d.setMinutes(d.getMinutes() + 40 + 20);
                    } else if (i === 3) {
                        scheduleText += `\`\`\`${i + 1}. ${lessons[i].lesson.toUpperCase()}\`\`\`\nüïí –° ${d.toLocaleTimeString().slice(0, 5)} - ${new Date(d2.setMinutes(d.getMinutes() + 40)).toLocaleTimeString().slice(0, 5)}, –ø–µ—Ä–µ–º–µ–Ω–∞ ${10} –º–∏–Ω—É—Ç\nüçΩ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ *—Å—Ç–æ–ª–æ–≤–∞—è*\n`;
                        d.setMinutes(d.getMinutes() + 40 + 10);
                    } else {
                        scheduleText += `\`\`\`${i + 1}. ${lessons[i].lesson.toUpperCase()}\`\`\`\nüïí –° ${d.toLocaleTimeString().slice(0, 5)} - ${new Date(d2.setMinutes(d.getMinutes() + 40)).toLocaleTimeString().slice(0, 5)}, –ø–µ—Ä–µ–º–µ–Ω–∞ ${10} –º–∏–Ω—É—Ç\n`;
                        d.setMinutes(d.getMinutes() + 40 + 10);
                    }
                }

                await bot.sendMessage(chatId, dayOfWeek)
                await bot.sendMessage(chatId, scheduleText, {
                    parse_mode: 'Markdown', // –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV1
                    reply_markup: {
                        keyboard: [
                            [{ text: "–ù–∞–∑–∞–¥" }]
                        ],
                        resize_keyboard: true
                    }
                });
            }

        }
    } catch (e) {
        if (e instanceof Error) {
            console.log(e.message)
            await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ :(')
        }
    }
}