import TelegramBot from "node-telegram-bot-api";
import { bot, dayOfWeek } from "..";
import { constBtns } from "./components/constBtns";
import { client } from "../db/main";
import { Lessons } from "../db/entity/lessons.entity";
import { getStartLessons } from "../utils/getStartLessons";

export async function startCommand(msg: TelegramBot.Message) {
    try {
        const chatId = msg.chat.id
        const text = `–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤. –û–Ω –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –∫–∞–∫–æ–π —É—Ä–æ–∫ –∏ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–∞. `

        const dayIdx = /* new Date().getDay() - 1*/ 1;
        const day = dayOfWeek[dayIdx];

        const lessons: Lessons[] = (await client.query(`
            SELECT * FROM lessons
            WHERE user_id = $1 AND day_of_week = $2
        `, [msg.from?.id, day])).rows;

        if (lessons.length > 0) {
            const date = await getStartLessons();
            let d = new Date(date);
            let dateNow = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

            let scheduleText = `\`\`\`\nüìÖ –£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\`\`\``;

            let currentLesson = null; // –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫
            let nextLesson = null; // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            let remainingTime = ''; // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è

            for (let i = 0; i < lessons.length; i++) {
                const d2 = new Date(d.getTime() + lessons[i].lesson_time * 60000); // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞
                let timeStart = d.toLocaleTimeString().slice(0, 5); // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞
                let timeEnd = d2.toLocaleTimeString().slice(0, 5); // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞
                let lesson = lessons[i].lesson.toUpperCase(); // –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞

                let [hours, minutes] = timeStart.split(':').map(Number);
                let dateStart = new Date();
                dateStart.setHours(hours);
                dateStart.setMinutes(minutes);

                let [endHours, endMinutes] = timeEnd.split(':').map(Number);
                let dateEnd = new Date();
                dateEnd.setHours(endHours);
                dateEnd.setMinutes(endMinutes);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —ç—Ç–æ—Ç —É—Ä–æ–∫
                if (dateNow >= dateStart && dateNow <= dateEnd) {
                    currentLesson = lesson;
                    let diffInMilliseconds = dateEnd.getTime() - dateNow.getTime(); // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —É—Ä–æ–∫–∞
                    console.log(diffInMilliseconds, lesson, i)
                    let diffInMinutes = Math.floor(diffInMilliseconds / 60000); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–Ω—É—Ç—ã
                    remainingTime = `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å ${diffInMinutes} –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ ${currentLesson}`;

                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç
                    if (i < lessons.length - 1) {
                        nextLesson = lessons[i + 1].lesson.toUpperCase();
                    }
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                if (i === 1 || i === 2) {
                    scheduleText += `\`\`\`${i + 1}. ${lesson}, –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: ${lessons[i].homework}\`\`\`\nüïí –° ${timeStart} - ${timeEnd}, \`–ø–µ—Ä–µ–º–µ–Ω–∞ ${20} –º–∏–Ω—É—Ç\`\n`;
                    d.setMinutes(d.getMinutes() + lessons[i].lesson_time + 20); // –£—Ä–æ–∫ + –ø–µ—Ä–µ–º–µ–Ω–∞
                } else if (i === 3) {
                    scheduleText += `\`\`\`${i + 1}. ${lesson}, –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: ${lessons[i].homework}\`\`\`\nüïí –° ${timeStart} - ${timeEnd}, \`–ø–µ—Ä–µ–º–µ–Ω–∞ ${10} –º–∏–Ω—É—Ç\`\nüçΩ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ *—Å—Ç–æ–ª–æ–≤–∞—è*\n`;
                    d.setMinutes(d.getMinutes() + lessons[i].lesson_time + 10); // –£—Ä–æ–∫ + –ø–µ—Ä–µ–º–µ–Ω–∞
                } else {
                    scheduleText += `\`\`\`${i + 1}. ${lesson}, –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: ${lessons[i].homework}\`\`\`\nüïí –° ${timeStart} - ${timeEnd}, \`–ø–µ—Ä–µ–º–µ–Ω–∞ ${10} –º–∏–Ω—É—Ç\`\n`;
                    d.setMinutes(d.getMinutes() + lessons[i].lesson_time + 10); // –£—Ä–æ–∫ + –ø–µ—Ä–µ–º–µ–Ω–∞
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
            if (remainingTime) {
                scheduleText += `\n\`\`\`${remainingTime}\`\`\`\n`;
                if (nextLesson) {
                    scheduleText += `\`\`\`–°–ª–µ–¥—É—é—â–∏–π ${nextLesson.toUpperCase()}\`\`\`\n`;
                }
            }

            await bot.sendMessage(chatId, scheduleText, {
                parse_mode: "Markdown"
            })
        } else {
            constBtns(msg, text)
        }
    } catch (e) {
        if (e instanceof Error) {
            console.log(e.message)
            await bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ üò¢')
        }
    }
}